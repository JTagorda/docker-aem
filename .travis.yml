language: java

services:
  - 'docker'

cache:
  directories:
      - $HOME/packages

before_install:
  - export IMAGE_NAME=$(grep imagename= Dockerfile | sed -e 's/.*imagename="\(.*\)".*/\1/')
  - export TEST_COMMAND=$(grep test.command= Dockerfile | sed -e 's/.*test.command="\(.*\)".*/\1/')
  - export TEST_COMMAND_VERIFY=$(grep test.command.verify= Dockerfile | sed -e 's/.*test.command.verify="\(.*\)".*/\1/')
  - export IMAGE_VERSION=$(grep version= Dockerfile | sed -e 's/.*version="\(.*\)".*/\1/')
  - export IMAGE="$ORGANISATION_NAME/$IMAGE_NAME"
  - echo IMAGE_NAME=$IMAGE_NAME
  - echo IMAGE_VERSION=$IMAGE_VERSION
  - echo TEST_COMMAND=$TEST_COMMAND
  - echo TEST_COMMAND_VERIFY=$TEST_COMMAND_VERIFY
  - echo DOWNLOAD PACKAGES
  - if [[ ! -d "$HOME/packages" ]]; then mkdir $HOME/packages; fi
  - ls -latr $PACKAGE_PATH
  - export PACKAGE_PATH="$HOME/packages"
  - echo DOWNLOAD PACKAGES INTO ${PACKAGE_PATH}
  - ./scripts/download.sh "$PACKAGE_PATH/01-" "$CREDS_ADOBE" "https://www.adobeaemcloud.com/content/companies/public/adobe/packages/cq650/servicepack/AEM-6.5.1.0/jcr%3acontent/package/file.res/AEM-6.5.1.0-6.5.1.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/02-" "$CREDS_ADOBE" "https://www.adobeaemcloud.com/content/companies/public/adobe/packages/cq650/servicepack/fd/AEM-Forms-6.5.1.0-LX/jcr%3acontent/package/file.res/AEM-Forms-6.5.1.0-LX-6.0.88.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/03-" "$CREDS_ADOBE" "https://www.adobeaemcloud.com/content/companies/public/adobe/packages/cq650/compatpack/aem-compat-cq65-to-cq64/jcr%3acontent/package/file.res/aem-compat-cq65-to-cq64-0.18.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/04-" "-" "https://github.com/Adobe-Consulting-Services/com.adobe.acs.bundles.twitter4j/releases/download/com.adobe.acs.bundles.twitter4j-1.0.0/com.adobe.acs.bundles.twitter4j-content-1.0.0.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/05-" "-" "https://github.com/Adobe-Consulting-Services/acs-aem-commons/releases/download/acs-aem-commons-4.3.0/acs-aem-commons-content-4.3.0.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/06-" "-" "https://github.com/adobe/aem-core-wcm-components/releases/download/core.wcm.components.reactor-2.5.0/core.wcm.components.all-2.5.0.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/07-" "-" "http://repo1.maven.org/maven2/biz/netcentric/cq/tools/accesscontroltool/accesscontroltool-package/2.3.2/accesscontroltool-package-2.3.2.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/08-" "-" "http://repo1.maven.org/maven2/biz/netcentric/cq/tools/accesscontroltool/accesscontroltool-oakindex-package/2.3.2/accesscontroltool-oakindex-package-2.3.2.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/09-" "$CREDS_ADOBE" "https://www.adobeaemcloud.com/content/companies/public/adobe/packages/cq600/component/vanityurls-components/jcr%3acontent/package/file.res/vanityurls-components-1.0.2.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/10-" "-" "https://github.com/aem-design/aemdesign-aem-core/releases/download/2.0.424/aemdesign-aem-core-deploy-2.0.424.zip"
  - ls -latr $PACKAGE_PATH

#build and test
install:
  - docker build --pull --build-arg CREDS_ADOBE=$CREDS_ADOBE --build-arg GOOGLE_DRIVEID=$GOOGLE_DRIVEID  -t $IMAGE:$IMAGE_VERSION .
  - docker tag $IMAGE:$IMAGE_VERSION $IMAGE:latest
  - export CONTAINER_COMMAND="docker run $IMAGE $TEST_COMMAND"
  - echo CONTAINER_COMMAND=$CONTAINER_COMMAND
  - export CONTAINER_OUTPUT=$(eval $CONTAINER_COMMAND)
  - echo CONTAINER_OUTPUT=$CONTAINER_OUTPUT
  - if [[ ! ${CONTAINER_OUTPUT} =~ ${TEST_COMMAND_VERIFY} ]]; then travis_terminate 1; fi
  - docker tag $IMAGE:$IMAGE_VERSION $IMAGE:$CONTAINER_OUTPUT
  - docker images

#test
script:
  - echo "LOGIN TO HUB.DOCKER"
  - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
  - echo "PUSH HUB.DOCKER"
  - docker push $IMAGE:$IMAGE_VERSION && docker push $IMAGE:$CONTAINER_OUTPUT && if [[ $TRAVIS_BRANCH == "master" ]]; then docker push $IMAGE:latest; fi
  - echo "UPDATE README IN HUB.DOCKER"
  - if [[ $TRAVIS_BRANCH == "master" ]]; then ./dockerhub.sh "$DOCKER_USERNAME" "$DOCKER_PASSWORD" "$IMAGE" "README.md"; fi

## Get the project version
before_deploy:
  - export CURRENT_VERSION=$(git describe --tag --always --long | sed -e 's/\(.*\)-\(.*\)-.*/\1.\2/')
  - echo CURRENT_VERSION=$CURRENT_VERSION
  - export TRAVIS_TAG=$CURRENT_VERSION
  - if [[ $TRAVIS_BRANCH == "master" ]]; then git tag $TRAVIS_TAG; fi

## Create release in GitHub
deploy:
  provider: releases
  api_key: $GITHUB_TOKEN
  skip_cleanup: true
  on:
    branch: master
  name: $CURRENT_VERSION
