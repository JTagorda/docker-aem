language: java

services:
  - 'docker'

env:
    global:
        - PACKAGE_PATH="$(pwd)/packages"
        - JAR_PATH="$(pwd)/jar"

cache:
  directories:
    - $JAR_PATH


before_install:
  - echo SWTICH TO PYTHON3
  - pyenv install 3.6.3
  - pyenv global 3.6.3
  - echo INSTALL PYTHON3 DEPENDENCIES
  - pip3 install requests
  - echo GET CONFIG FROM DOCKERFILE
  - export IMAGE_NAME=$(grep imagename= Dockerfile | sed -e 's/.*imagename="\(.*\)".*/\1/')
  - export TEST_COMMAND=$(grep test.command= Dockerfile | sed -e 's/.*test.command="\(.*\)".*/\1/')
  - export TEST_COMMAND_VERIFY=$(grep test.command.verify= Dockerfile | sed -e 's/.*test.command.verify="\(.*\)".*/\1/')
  - export IMAGE_VERSION=$(grep version= Dockerfile | sed -e 's/.*version="\(.*\)".*/\1/')
  - export IMAGE="$ORGANISATION_NAME/$IMAGE_NAME"
  - echo IMAGE_NAME=$IMAGE_NAME
  - echo IMAGE_VERSION=$IMAGE_VERSION
  - echo TEST_COMMAND=$TEST_COMMAND
  - echo TEST_COMMAND_VERIFY=$TEST_COMMAND_VERIFY
  - echo DOWNLOAD PACKAGES
  - echo $PACKAGE_PATH
  - echo $JAR_PATH
  - if [[ ! -d $PACKAGE_PATH ]]; then mkdir $PACKAGE_PATH; fi
  - if [[ ! -d $JAR_PATH ]]; then mkdir $JAR_PATH; fi
  - echo PACKAGES CONTENTS $PACKAGE_PATH
  - ls -latr $PACKAGE_PATH
  - echo JAR CONTENTS $JAR_PATH
  - ls -latr $JAR_PATH
  - echo DOWNLOAD JAR INTO ${JAR_PATH}
  - ./scripts/gdrive.sh "download" "$GOOGLE_DRIVEID_AEM63" "$JAR_PATH/aem-quickstart.jar"
  - ls -latr $JAR_PATH
  - echo DOWNLOAD PACKAGES INTO ${PACKAGE_PATH}
  - ./scripts/download.sh "$PACKAGE_PATH/01-" "$CREDS_ADOBE" "-" "https://www.adobeaemcloud.com/content/companies/public/adobe/packages/cq630/servicepack/AEM-6.3.3.0/jcr%3acontent/package/file.res/AEM-6.3.3.0-6.3.3.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/02-" "$CREDS_ADOBE" "-" "https://www.adobeaemcloud.com/content/companies/public/adobe/packages/cq630/cumulativefixpack/AEM-CFP-6.3.3.6/jcr%3acontent/package/file.res/AEM-CFP-6.3.3.6-6.0.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/03-" "$CREDS_ADOBE" "-" "https://www.adobeaemcloud.com/content/companies/public/adobe/packages/cq630/servicepack/fd/AEM-Forms-6.3.3.6-LX/jcr%3acontent/package/file.res/AEM-Forms-6.3.3.6-LX-4.1.124.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/05-" "-" "-" "https://github.com/Adobe-Consulting-Services/com.adobe.acs.bundles.twitter4j/releases/download/com.adobe.acs.bundles.twitter4j-1.0.0/com.adobe.acs.bundles.twitter4j-content-1.0.0.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/06-" "-" "-" "https://github.com/Adobe-Consulting-Services/acs-aem-commons/releases/download/acs-aem-commons-4.3.4/acs-aem-commons-ui.content-4.3.4-min.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/07-" "-" "-" "https://github.com/Adobe-Consulting-Services/acs-aem-commons/releases/download/acs-aem-commons-4.3.4/acs-aem-commons-ui.apps-4.3.4-min.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/08-" "-" "-" "https://github.com/Adobe-Consulting-Services/acs-aem-commons/releases/download/acs-aem-commons-4.3.4/acs-aem-commons-bundle-4.3.4.jar"
  - ./scripts/download.sh "$PACKAGE_PATH/09-" "-" "-" "https://github.com/adobe/aem-core-wcm-components/releases/download/core.wcm.components.reactor-2.7.0/core.wcm.components.all-2.7.0.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/10-" "-" "-" "http://repo1.maven.org/maven2/biz/netcentric/cq/tools/accesscontroltool/accesscontroltool-package/2.4.1/accesscontroltool-package-2.4.1.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/11-" "-" "-" "http://repo1.maven.org/maven2/biz/netcentric/cq/tools/accesscontroltool/accesscontroltool-oakindex-package/2.4.1/accesscontroltool-oakindex-package-2.4.1.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/12-" "$CREDS_ADOBE" "-" "https://www.adobeaemcloud.com/content/companies/public/adobe/packages/cq600/component/vanityurls-components/jcr%3acontent/package/file.res/vanityurls-components-1.0.2.zip"
  - ./scripts/download.sh "$PACKAGE_PATH/13-" "-" "githublatest:aemdesign-aem-core-deploy" "https://api.github.com/repos/aem-design/aemdesign-aem-core/releases/latest"
  - ./scripts/download.sh "$PACKAGE_PATH/14-" "-" "githublatest:aemdesign-aem-support-deploy" "https://api.github.com/repos/aem-design/aemdesign-aem-support/releases/latest"
  - find $PACKAGE_PATH -type f
  - export DOWNLOAD_COUNT=$(find $PACKAGE_PATH -type f | wc -l)
  - echo DOWNLOAD_COUNT=$DOWNLOAD_COUNT
  - export PACKAGE_COUNT=11
  - echo "CHECK IF WE GOT ALL OF THE PACKAGES"
  - if [[ "${DOWNLOAD_COUNT}" != "${PACKAGE_COUNT}" ]]; then travis_terminate 1; fi
  - echo GET CONFIG FROM GIT
  - export CURRENT_VERSION=$(git describe --tag --always --long | sed -e 's/\(.*\)-\(.*\)-.*/\1.\2/')
  - declare -a CURRENT_VERSION_ARRAY="(${CURRENT_VERSION//./ })"; export SEMVER_MAJOR=${CURRENT_VERSION_ARRAY[0]}; export SEMVER_MINOR=${CURRENT_VERSION_ARRAY[1]}; export SEMVER_PATCH=${CURRENT_VERSION_ARRAY[2]}; export SEMVER_BUILD=${CURRENT_VERSION_ARRAY[-1]}
  - echo SEMVER_MAJOR:${SEMVER_MAJOR}
  - echo SEMVER_MINOR:${SEMVER_MINOR}
  - echo SEMVER_BUILD:$(( ${SEMVER_PATCH} + ${SEMVER_BUILD} ))
  - export SEMVER=${SEMVER_MAJOR}.${SEMVER_MINOR}.${SEMVER_BUILD}
  - echo SEMVER:$SEMVER
  - if [[ ${SEMVER_MAJOR} == "" ]]; then travis_terminate 1; fi
  - export TRAVIS_TAG=$SEMVER
  - echo TRAVIS_TAG:$TRAVIS_TAG

#build and test
install:
  - docker build --pull -t $IMAGE:$IMAGE_VERSION .
  - export CONTAINER_COMMAND="docker run $IMAGE:$IMAGE_VERSION $TEST_COMMAND"
  - echo CONTAINER_COMMAND=$CONTAINER_COMMAND
  - export CONTAINER_OUTPUT=$(eval $CONTAINER_COMMAND)
  - echo CONTAINER_OUTPUT=$CONTAINER_OUTPUT
  - if [[ ! ${CONTAINER_OUTPUT} =~ ${TEST_COMMAND_VERIFY} ]]; then travis_terminate 1; fi
  - docker images

#test
script:
  - echo "LOGIN TO HUB.DOCKER"
  - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
  - echo "PUSH HUB.DOCKER"
  - docker push $IMAGE:$IMAGE_VERSION
  - if [[ $TRAVIS_BRANCH == "master" ]]; then docker tag $IMAGE:$IMAGE_VERSION $IMAGE:latest && docker push $IMAGE:latest; fi
  - echo "UPDATE README IN HUB.DOCKER"
  - if [[ $TRAVIS_BRANCH == "master" ]]; then docker run --rm -v $(pwd):/data/ aemdesign/dockerhub-description "$DOCKER_USERNAME" "$DOCKER_PASSWORD" "$IMAGE"; fi

## Get the project version
before_deploy:
  - if [[ $TRAVIS_BRANCH == "master" ]]; then git tag $TRAVIS_TAG; fi

## Create release in GitHub
deploy:
  provider: releases
  tag_name: $TRAVIS_TAG
  name: $TRAVIS_TAG
  target_commitish: $TRAVIS_COMMIT
  api_key: $GITHUB_TOKEN
  skip_cleanup: true
  on:
    branch: master
